#pragma once
#undef min
#undef max

FORCEINLINE Vector3 operator+(const Vector3 &lhs, const Vector3 &rhs) noexcept {
	return DX::XMVectorAdd(lhs, rhs);
}
FORCEINLINE Vector3 operator-(const Vector3 &lhs, const Vector3 &rhs) noexcept {
	return DX::XMVectorSubtract(lhs, rhs);
}
FORCEINLINE Vector3 operator*(const Vector3 &lhs, const Vector3 &rhs) noexcept {
	return DX::XMVectorMultiply(lhs, rhs);
}
FORCEINLINE Vector3 operator/(const Vector3 &lhs, const Vector3 &rhs) noexcept {
	return DX::XMVectorDivide(lhs, rhs);
}
FORCEINLINE Vector3 operator+(const Vector3 &lhs, const Scalar &rhs) noexcept {
	return DX::XMVectorAdd(lhs, DX::XMVECTOR(rhs)); 
}
FORCEINLINE Vector3 operator-(const Vector3 &lhs, const Scalar &rhs) noexcept {
	return DX::XMVectorSubtract(lhs, DX::XMVECTOR(rhs)); 
}
FORCEINLINE Vector3 operator*(const Vector3 &lhs, const Scalar &rhs) noexcept {
	return DX::XMVectorMultiply(lhs, DX::XMVECTOR(rhs)); 
}
FORCEINLINE Vector3 operator/(const Vector3 &lhs, const Scalar &rhs) noexcept {
	return DX::XMVectorDivide(lhs, DX::XMVECTOR(rhs)); 
}
FORCEINLINE Vector3 operator+(const Scalar &lhs, const Vector3 &rhs) noexcept {
	return DX::XMVectorAdd(DX::XMVECTOR(lhs), rhs);
}
FORCEINLINE Vector3 operator-(const Scalar &lhs, const Vector3 &rhs) noexcept {
	return DX::XMVectorSubtract(DX::XMVECTOR(lhs), rhs);
}
FORCEINLINE Vector3 operator*(const Scalar &lhs, const Vector3 &rhs) noexcept {
	return DX::XMVectorMultiply(DX::XMVECTOR(lhs), rhs);
}
FORCEINLINE Vector3 operator/(const Scalar &lhs, const Vector3 &rhs) noexcept {
	return DX::XMVectorDivide(DX::XMVECTOR(lhs), rhs);
}
FORCEINLINE Vector3 operator+(const float &lhs, const Vector3 &rhs) noexcept {
	return DX::XMVectorAdd(Vector3(lhs), rhs);
}
FORCEINLINE Vector3 operator-(const float &lhs, const Vector3 &rhs) noexcept {
	return DX::XMVectorSubtract(Vector3(lhs), rhs);
}
FORCEINLINE Vector3 operator*(const float &lhs, const Vector3 &rhs) noexcept {
	return DX::XMVectorMultiply(Vector3(lhs), rhs);
}
FORCEINLINE Vector3 operator/(const float &lhs, const Vector3 &rhs) noexcept {
	return DX::XMVectorDivide(Vector3(lhs), rhs);
}
FORCEINLINE Vector3 operator+(const Vector3 &lhs, const float &rhs) noexcept {
	return DX::XMVectorAdd(lhs, Vector3(rhs));
}
FORCEINLINE Vector3 operator-(const Vector3 &lhs, const float &rhs) noexcept {
	return DX::XMVectorSubtract(lhs, Vector3(rhs));
}
FORCEINLINE Vector3 operator*(const Vector3 &lhs, const float &rhs) noexcept {
	return DX::XMVectorMultiply(lhs, Vector3(rhs));
}
FORCEINLINE Vector3 operator/(const Vector3 &lhs, const float &rhs) noexcept {
	return DX::XMVectorDivide(lhs, Vector3(rhs));
}
FORCEINLINE Vector3 &operator+=(Vector3 &lhs, const Vector3 &rhs) noexcept {
	lhs = lhs + rhs;
	return lhs;
}
FORCEINLINE Vector3 &operator-=(Vector3 &lhs, const Vector3 &rhs) noexcept {
	lhs = lhs - rhs;
	return lhs;
}
FORCEINLINE Vector3 &operator*=(Vector3 &lhs, const Vector3 &rhs) noexcept {
	lhs = lhs * rhs;
	return lhs;
}
FORCEINLINE Vector3 &operator/=(Vector3 &lhs, const Vector3 &rhs) noexcept {
	lhs = lhs / rhs;
	return lhs;
}
FORCEINLINE Vector3 &operator+=(Vector3 &lhs, const Scalar &rhs) noexcept {
	lhs = lhs + rhs;
	return lhs;
}
FORCEINLINE Vector3 &operator-=(Vector3 &lhs, const Scalar &rhs) noexcept {
	lhs = lhs - rhs;
	return lhs;
}
FORCEINLINE Vector3 &operator*=(Vector3 &lhs, const Scalar &rhs) noexcept {
	lhs = lhs * rhs;
	return lhs;
}
FORCEINLINE Vector3 &operator/=(Vector3 &lhs, const Scalar &rhs) noexcept {
	lhs = lhs / rhs;
	return lhs;
}
FORCEINLINE Vector3 &operator+=(Vector3 &lhs, float rhs) noexcept {
	lhs = lhs + Vector3(rhs);
	return lhs;
}
FORCEINLINE Vector3 &operator-=(Vector3 &lhs, float rhs) noexcept {
	lhs = lhs - Vector3(rhs);
	return lhs;
}
FORCEINLINE Vector3 &operator*=(Vector3 &lhs, float rhs) noexcept {
	lhs = lhs * Vector3(rhs);
	return lhs;
}
FORCEINLINE Vector3 &operator/=(Vector3 &lhs, float rhs) noexcept {
	lhs = lhs / Vector3(rhs);
	return lhs;
}
FORCEINLINE Vector3 operator-(const Vector3 &v) noexcept {
	return DX::XMVectorNegate(v);
}
FORCEINLINE BoolVector operator<  (Vector3 lhs, Vector3 rhs) noexcept {
	return DX::XMVectorLess(lhs, rhs);
} 
FORCEINLINE BoolVector operator<= (Vector3 lhs, Vector3 rhs) noexcept {
	return DX::XMVectorLessOrEqual(lhs, rhs);
} 
FORCEINLINE BoolVector operator>  (Vector3 lhs, Vector3 rhs) noexcept {
	return DX::XMVectorGreater(lhs, rhs);
} 
FORCEINLINE BoolVector operator>= (Vector3 lhs, Vector3 rhs) noexcept {
	return DX::XMVectorGreaterOrEqual(lhs, rhs);
} 
FORCEINLINE BoolVector operator== (Vector3 lhs, Vector3 rhs) noexcept {
	return DX::XMVectorEqual(lhs, rhs);
} 
FORCEINLINE Vector3 sqrt(Vector3 s) noexcept {
	return Vector3(DX::XMVectorSqrt(s));
} 
FORCEINLINE Vector3 inverse(Vector3 s) noexcept {
	return Vector3(DX::XMVectorReciprocal(s));
} 
FORCEINLINE Vector3 inverseSqrt(Vector3 s) noexcept {
	return Vector3(DX::XMVectorReciprocalSqrt(s));
} 
FORCEINLINE Vector3 floor(Vector3 s) noexcept {
	return Vector3(DX::XMVectorFloor(s));
} 
FORCEINLINE Vector3 ceil(Vector3 s) noexcept {
	return Vector3(DX::XMVectorCeiling(s));
} 
FORCEINLINE Vector3 round(Vector3 s) noexcept {
	return Vector3(DX::XMVectorRound(s));
} 
FORCEINLINE Vector3 abs(Vector3 s) noexcept {
	return Vector3(DX::XMVectorAbs(s));
} 
FORCEINLINE Vector3 exp(Vector3 s) noexcept {
	return Vector3(DX::XMVectorExp(s));
} 
FORCEINLINE Vector3 pow(Vector3 b, Vector3 e) noexcept {
	return Vector3(DX::XMVectorPow(b, e));
} 
FORCEINLINE Vector3 log(Vector3 s) noexcept {
	return Vector3(DX::XMVectorLog(s));
} 
FORCEINLINE Vector3 sin(Vector3 s) noexcept {
	return Vector3(DX::XMVectorSin(s));
} 
FORCEINLINE Vector3 cos(Vector3 s) noexcept {
	return Vector3(DX::XMVectorCos(s));
} 
FORCEINLINE Vector3 tan(Vector3 s) noexcept {
	return Vector3(DX::XMVectorTan(s));
} 
FORCEINLINE Vector3 asin(Vector3 s) noexcept {
	return Vector3(DX::XMVectorASin(s));
} 
FORCEINLINE Vector3 acos(Vector3 s) noexcept {
	return Vector3(DX::XMVectorACos(s));
} 
FORCEINLINE Vector3 atan(Vector3 s) noexcept {
	return Vector3(DX::XMVectorATan(s));
} 
FORCEINLINE Vector3 atan2(Vector3 y, Vector3 x) noexcept {
	return Vector3(DX::XMVectorATan2(y, x));
} 
FORCEINLINE Vector3 lerp(Vector3 a, Vector3 b, Vector3 t) noexcept {
	return Vector3(DX::XMVectorLerpV(a, b, t));
} 
FORCEINLINE Vector3 lerp(Vector3 a, Vector3 b, float t) noexcept {
	return Vector3(DX::XMVectorLerp(a, b, t));
} 
FORCEINLINE Vector3 max(Vector3 a, Vector3 b) noexcept {
	return Vector3(DX::XMVectorMax(a, b));
} 
FORCEINLINE Vector3 min(Vector3 a, Vector3 b) noexcept {
	return Vector3(DX::XMVectorMin(a, b));
} 
FORCEINLINE Vector3 clamp(Vector3 v, Vector3 a, Vector3 b) noexcept {
	return min(max(v, a), b);
}


////////////////////////////////////////////////////////////////////////////////////////////////


FORCEINLINE Vector4 operator+(const Vector4 &lhs, const Vector4 &rhs) noexcept {
	return DX::XMVectorAdd(lhs, rhs);
}
FORCEINLINE Vector4 operator-(const Vector4 &lhs, const Vector4 &rhs) noexcept {
	return DX::XMVectorSubtract(lhs, rhs);
}
FORCEINLINE Vector4 operator*(const Vector4 &lhs, const Vector4 &rhs) noexcept {
	return DX::XMVectorMultiply(lhs, rhs);
}
FORCEINLINE Vector4 operator/(const Vector4 &lhs, const Vector4 &rhs) noexcept {
	return DX::XMVectorDivide(lhs, rhs);
}
FORCEINLINE Vector4 operator+(const Vector4 &lhs, const Scalar &rhs) noexcept {
	return DX::XMVectorAdd(lhs, DX::XMVECTOR(rhs));
}
FORCEINLINE Vector4 operator-(const Vector4 &lhs, const Scalar &rhs) noexcept {
	return DX::XMVectorSubtract(lhs, DX::XMVECTOR(rhs));
}
FORCEINLINE Vector4 operator*(const Vector4 &lhs, const Scalar &rhs) noexcept {
	return DX::XMVectorMultiply(lhs, DX::XMVECTOR(rhs));
}
FORCEINLINE Vector4 operator/(const Vector4 &lhs, const Scalar &rhs) noexcept {
	return DX::XMVectorDivide(lhs, DX::XMVECTOR(rhs));
}
FORCEINLINE Vector4 operator+(const Scalar &lhs, const Vector4 &rhs) noexcept {
	return DX::XMVectorAdd(DX::XMVECTOR(lhs), rhs);
}
FORCEINLINE Vector4 operator-(const Scalar &lhs, const Vector4 &rhs) noexcept {
	return DX::XMVectorSubtract(DX::XMVECTOR(lhs), rhs);
}
FORCEINLINE Vector4 operator*(const Scalar &lhs, const Vector4 &rhs) noexcept {
	return DX::XMVectorMultiply(DX::XMVECTOR(lhs), rhs);
}
FORCEINLINE Vector4 operator/(const Scalar &lhs, const Vector4 &rhs) noexcept {
	return DX::XMVectorDivide(DX::XMVECTOR(lhs), rhs);
}
FORCEINLINE Vector4 operator+(const float &lhs, const Vector4 &rhs) noexcept {
	return DX::XMVectorAdd(Vector4(lhs), rhs);
}
FORCEINLINE Vector4 operator-(const float &lhs, const Vector4 &rhs) noexcept {
	return DX::XMVectorSubtract(Vector4(lhs), rhs);
}
FORCEINLINE Vector4 operator*(const float &lhs, const Vector4 &rhs) noexcept {
	return DX::XMVectorMultiply(Vector4(lhs), rhs);
}
FORCEINLINE Vector4 operator/(const float &lhs, const Vector4 &rhs) noexcept {
	return DX::XMVectorDivide(Vector4(lhs), rhs);
}
FORCEINLINE Vector4 operator+(const Vector4 &lhs, const float &rhs) noexcept {
	return DX::XMVectorAdd(lhs, Vector4(rhs));
}
FORCEINLINE Vector4 operator-(const Vector4 &lhs, const float &rhs) noexcept {
	return DX::XMVectorSubtract(lhs, Vector4(rhs));
}
FORCEINLINE Vector4 operator*(const Vector4 &lhs, const float &rhs) noexcept {
	return DX::XMVectorMultiply(lhs, Vector4(rhs));
}
FORCEINLINE Vector4 operator/(const Vector4 &lhs, const float &rhs) noexcept {
	return DX::XMVectorDivide(lhs, Vector4(rhs));
}
FORCEINLINE Vector4 &operator+=(Vector4 &lhs, const Vector4 &rhs) noexcept {
	lhs = lhs + rhs;
	return lhs;
}
FORCEINLINE Vector4 &operator-=(Vector4 &lhs, const Vector4 &rhs) noexcept {
	lhs = lhs - rhs;
	return lhs;
}
FORCEINLINE Vector4 &operator*=(Vector4 &lhs, const Vector4 &rhs) noexcept {
	lhs = lhs * rhs;
	return lhs;
}
FORCEINLINE Vector4 &operator/=(Vector4 &lhs, const Vector4 &rhs) noexcept {
	lhs = lhs / rhs;
	return lhs;
}
FORCEINLINE Vector4 &operator+=(Vector4 &lhs, const Scalar &rhs) noexcept {
	lhs = lhs + rhs;
	return lhs;
}
FORCEINLINE Vector4 &operator-=(Vector4 &lhs, const Scalar &rhs) noexcept {
	lhs = lhs - rhs;
	return lhs;
}
FORCEINLINE Vector4 &operator*=(Vector4 &lhs, const Scalar &rhs) noexcept {
	lhs = lhs * rhs;
	return lhs;
}
FORCEINLINE Vector4 &operator/=(Vector4 &lhs, const Scalar &rhs) noexcept {
	lhs = lhs / rhs;
	return lhs;
}
FORCEINLINE Vector4 &operator+=(Vector4 &lhs, float rhs) noexcept {
	lhs = lhs + Vector4(rhs);
	return lhs;
}
FORCEINLINE Vector4 &operator-=(Vector4 &lhs, float rhs) noexcept {
	lhs = lhs - Vector4(rhs);
	return lhs;
}
FORCEINLINE Vector4 &operator*=(Vector4 &lhs, float rhs) noexcept {
	lhs = lhs * Vector4(rhs);
	return lhs;
}
FORCEINLINE Vector4 &operator/=(Vector4 &lhs, float rhs) noexcept {
	lhs = lhs / Vector4(rhs);
	return lhs;
}
FORCEINLINE Vector4 operator-(const Vector4 &v) noexcept {
	return DX::XMVectorNegate(v);
}
FORCEINLINE BoolVector operator<  (Vector4 lhs, Vector4 rhs) noexcept {
	return DX::XMVectorLess(lhs, rhs);
}
FORCEINLINE BoolVector operator<= (Vector4 lhs, Vector4 rhs) noexcept {
	return DX::XMVectorLessOrEqual(lhs, rhs);
}
FORCEINLINE BoolVector operator>  (Vector4 lhs, Vector4 rhs) noexcept {
	return DX::XMVectorGreater(lhs, rhs);
}
FORCEINLINE BoolVector operator>= (Vector4 lhs, Vector4 rhs) noexcept {
	return DX::XMVectorGreaterOrEqual(lhs, rhs);
}
FORCEINLINE BoolVector operator== (Vector4 lhs, Vector4 rhs) noexcept {
	return DX::XMVectorEqual(lhs, rhs);
}
FORCEINLINE Vector4 sqrt(Vector4 s) noexcept {
	return Vector4(DX::XMVectorSqrt(s));
}
FORCEINLINE Vector4 inverse(Vector4 s) noexcept {
	return Vector4(DX::XMVectorReciprocal(s));
}
FORCEINLINE Vector4 inverseSqrt(Vector4 s) noexcept {
	return Vector4(DX::XMVectorReciprocalSqrt(s));
}
FORCEINLINE Vector4 floor(Vector4 s) noexcept {
	return Vector4(DX::XMVectorFloor(s));
}
FORCEINLINE Vector4 ceil(Vector4 s) noexcept {
	return Vector4(DX::XMVectorCeiling(s));
}
FORCEINLINE Vector4 round(Vector4 s) noexcept {
	return Vector4(DX::XMVectorRound(s));
}
FORCEINLINE Vector4 abs(Vector4 s) noexcept {
	return Vector4(DX::XMVectorAbs(s));
}
FORCEINLINE Vector4 exp(Vector4 s) noexcept {
	return Vector4(DX::XMVectorExp(s));
}
FORCEINLINE Vector4 pow(Vector4 b, Vector4 e) noexcept {
	return Vector4(DX::XMVectorPow(b, e));
}
FORCEINLINE Vector4 log(Vector4 s) noexcept {
	return Vector4(DX::XMVectorLog(s));
}
FORCEINLINE Vector4 sin(Vector4 s) noexcept {
	return Vector4(DX::XMVectorSin(s));
}
FORCEINLINE Vector4 cos(Vector4 s) noexcept {
	return Vector4(DX::XMVectorCos(s));
}
FORCEINLINE Vector4 tan(Vector4 s) noexcept {
	return Vector4(DX::XMVectorTan(s));
}
FORCEINLINE Vector4 asin(Vector4 s) noexcept {
	return Vector4(DX::XMVectorASin(s));
}
FORCEINLINE Vector4 acos(Vector4 s) noexcept {
	return Vector4(DX::XMVectorACos(s));
}
FORCEINLINE Vector4 atan(Vector4 s) noexcept {
	return Vector4(DX::XMVectorATan(s));
}
FORCEINLINE Vector4 atan2(Vector4 y, Vector4 x) noexcept {
	return Vector4(DX::XMVectorATan2(y, x));
}
FORCEINLINE Vector4 lerp(Vector4 a, Vector4 b, Vector4 t) noexcept {
	return Vector4(DX::XMVectorLerpV(a, b, t));
}
FORCEINLINE Vector4 lerp(Vector4 a, Vector4 b, float t) noexcept {
	return Vector4(DX::XMVectorLerp(a, b, t));
}
FORCEINLINE Vector4 max(Vector4 a, Vector4 b) noexcept {
	return Vector4(DX::XMVectorMax(a, b));
}
FORCEINLINE Vector4 min(Vector4 a, Vector4 b) noexcept {
	return Vector4(DX::XMVectorMin(a, b));
}
FORCEINLINE Vector4 clamp(Vector4 v, Vector4 a, Vector4 b) noexcept {
	return min(max(v, a), b);
}


////////////////////////////////////////////////////////////////////////////////////////////////

FORCEINLINE Vector3 normalize(const Vector3 &v) noexcept {
	return DX::XMVector3Normalize(v);
}
FORCEINLINE Scalar dot(Vector3 v1, Vector3 v2) noexcept {
	return Scalar(DX::XMVector3Dot(v1, v2));
}
FORCEINLINE Vector3 cross(Vector3 v0, Vector3 v1) {
	return Scalar(DX::XMVector3Cross(v0, v1));
}
FORCEINLINE Scalar length(Vector3 v) {
	return Scalar(DX::XMVector3Length(v));
}
FORCEINLINE Scalar lengthSquare(Vector3 v) {
	return Scalar(DX::XMVector3LengthSq(v));
}
FORCEINLINE Scalar inverseLength(Vector3 v) {
	return Scalar(DX::XMVector3ReciprocalLength(v));
}

FORCEINLINE Vector4 normalize(const Vector4 &v) noexcept {
	return DX::XMVector4Normalize(v);
}
FORCEINLINE Scalar dot(Vector4 v1, Vector4 v2) noexcept {
	return Scalar(DX::XMVector4Dot(v1, v2));
}
FORCEINLINE Scalar length(Vector4 v) {
	return Scalar(DX::XMVector4Length(v));
}
FORCEINLINE Scalar lengthSquare(Vector4 v) {
	return Scalar(DX::XMVector4LengthSq(v));
}
FORCEINLINE Scalar inverseLength(Vector4 v) {
	return Scalar(DX::XMVector4ReciprocalLength(v));
}