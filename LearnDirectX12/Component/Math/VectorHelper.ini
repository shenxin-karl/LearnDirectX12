#pragma once
#include "VectorHelper.h"

namespace Math {

template<typename T, size_t N>
FORCEINLINE T dot(const VectorHelper<T, N> &lhs, const VectorHelper<T, N> &rhs) {
	T sum = T{};
	for (size_t i = 0; i < N; ++i) {
		auto tmp = lhs[i] * rhs[i];
		sum += tmp;
	}
	return sum;
}

template<typename T, size_t N>
FORCEINLINE T length(const VectorHelper<T, N> &vec) {
	return std::sqrt(lengthSqr(vec));
}

template<typename T, size_t N>
T lengthSqr(const VectorHelper<T, N> &vec) {
	return dot(vec, vec);
}

template<typename T, size_t N>
FORCEINLINE VectorHelper<T, N> normalize(const VectorHelper<T, N> &vec) {
	auto res = vec;
	T len = length(vec);
	res /= len;
	return res;
}

template<typename T, size_t N>
std::ostream &operator<<(std::ostream &os, const VectorHelper<T, N> &vec) {
	os << '(';
	for (size_t i = 0; i < N; ++i)
		os << ' ' << vec[i];
	os << " )";
	return os;
}

/*----------------------------- add --------------------------------*/
template<typename T, size_t N, typename T1> requires(std::is_convertible_v<T1, T>)
FORCEINLINE VectorHelper<T, N> operator+(const VectorHelper<T, N> &lhs, T1 rhs) {
	auto res = lhs;
	res += rhs;
	return res;
}
template<typename T, size_t N, typename T1> requires(std::is_convertible_v<T1, T>)
FORCEINLINE VectorHelper<T, N> operator+(T1 lhs, const VectorHelper<T, N> &rhs) {
	auto res = rhs;
	res += lhs;
	return res;
}
template<typename T, size_t N, typename T1> requires(std::is_convertible_v<T1, T>)
FORCEINLINE VectorHelper<T, N> &operator+=(VectorHelper<T, N> &lhs, T1 rhs) {
	for (size_t i = 0; i < N; ++i)
		lhs[i] += rhs;
	return lhs;
}
template<typename T, size_t N>
FORCEINLINE VectorHelper<T, N> operator+(const VectorHelper<T, N> &lhs, const VectorHelper<T, N> &rhs) {
	auto res = lhs;
	res += rhs;
	return res;
}
template<typename T, size_t N>
FORCEINLINE VectorHelper<T, N> &operator+=(VectorHelper<T, N> &lhs, const VectorHelper<T, N> &rhs) {
	for (size_t i = 0; i < N; ++i)
		lhs[i] += rhs[i];
	return lhs;
}
/*----------------------------- add --------------------------------*/
/*----------------------------- sub --------------------------------*/
template<typename T, size_t N, typename T1> requires(std::is_convertible_v<T1, T>)
FORCEINLINE VectorHelper<T, N> operator-(const VectorHelper<T, N> &lhs, T1 rhs) {
	auto res = lhs;
	res -= rhs;
	return res;
}
template<typename T, size_t N, typename T1> requires(std::is_convertible_v<T1, T>)
FORCEINLINE VectorHelper<T, N> operator-(T1 lhs, const VectorHelper<T, N> &rhs) {
	auto res = rhs;
	res -= lhs;
	return res;
}
template<typename T, size_t N, typename T1> requires(std::is_convertible_v<T1, T>)
FORCEINLINE VectorHelper<T, N> &operator-=(VectorHelper<T, N> &lhs, T1 rhs) {
	for (size_t i = 0; i < N; ++i)
		lhs[i] -= rhs;
	return lhs;
}
template<typename T, size_t N>
FORCEINLINE VectorHelper<T, N> operator-(const VectorHelper<T, N> &lhs, const VectorHelper<T, N> &rhs) {
	auto res = lhs;
	res -= rhs;
	return res;
}
template<typename T, size_t N>
FORCEINLINE VectorHelper<T, N> &operator-=(VectorHelper<T, N> &lhs, const VectorHelper<T, N> &rhs) {
	for (size_t i = 0; i < N; ++i)
		lhs[i] -= rhs[i];
	return lhs;
}
/*----------------------------- sub --------------------------------*/
/*----------------------------- mul --------------------------------*/
template<typename T, size_t N, typename T1> requires(std::is_convertible_v<T1, T>)
FORCEINLINE VectorHelper<T, N> operator*(const VectorHelper<T, N> &lhs, T1 rhs) {
	auto res = lhs;
	res *= rhs;
	return res;
}
template<typename T, size_t N, typename T1> requires(std::is_convertible_v<T1, T>)
FORCEINLINE VectorHelper<T, N> operator*(T1 lhs, const VectorHelper<T, N> &rhs) {
	auto res = rhs;
	res *= lhs;
	return res;
}
template<typename T, size_t N, typename T1> requires(std::is_convertible_v<T1, T>)
FORCEINLINE VectorHelper<T, N> &operator*=(VectorHelper<T, N> &lhs, T1 rhs) {
	for (size_t i = 0; i < N; ++i)
		lhs[i] *= rhs;
	return lhs;
}
template<typename T, size_t N>
FORCEINLINE VectorHelper<T, N> operator*(const VectorHelper<T, N> &lhs, const VectorHelper<T, N> &rhs) {
	auto res = lhs;
	res *= rhs;
	return res;
}
template<typename T, size_t N>
FORCEINLINE VectorHelper<T, N> &operator*=(VectorHelper<T, N> &lhs, const VectorHelper<T, N> &rhs) {
	for (size_t i = 0; i < N; ++i)
		lhs[i] *= rhs[i];
	return lhs;
}
/*----------------------------- mul --------------------------------*/
/*----------------------------- div --------------------------------*/
template<typename T, size_t N, typename T1> requires(std::is_convertible_v<T1, T>)
FORCEINLINE VectorHelper<T, N> operator/(const VectorHelper<T, N> &lhs, T1 rhs) {
	auto res = lhs;
	res /= rhs;
	return res;
}
template<typename T, size_t N, typename T1> requires(std::is_convertible_v<T1, T>)
FORCEINLINE VectorHelper<T, N> operator/(T1 lhs, const VectorHelper<T, N> &rhs) {
	auto res = rhs;
	res /= lhs;
	return res;
}
template<typename T, size_t N, typename T1> requires(std::is_convertible_v<T1, T>)
FORCEINLINE VectorHelper<T, N> &operator/=(VectorHelper<T, N> &lhs, T1 rhs) {
	for (size_t i = 0; i < N; ++i)
		lhs[i] /= rhs;
	return lhs;
}
template<typename T, size_t N>
FORCEINLINE VectorHelper<T, N> operator/(const VectorHelper<T, N> &lhs, const VectorHelper<T, N> &rhs) {
	auto res = lhs;
	res /= rhs;
	return res;
}
template<typename T, size_t N>
FORCEINLINE VectorHelper<T, N> &operator/=(VectorHelper<T, N> &lhs, const VectorHelper<T, N> &rhs) {
	for (size_t i = 0; i < N; ++i)
		lhs[i] /= rhs[i];
	return lhs;
}
/*----------------------------- div --------------------------------*/
template<typename T, size_t N>
FORCEINLINE VectorHelper<T, N> operator-(VectorHelper<T, N> &v) {
	decltype(v) res;
	for (size_t i = 0; i < N; ++i)
		res[i] = -v[i];
	return res;
}

}